module.exports = function anonymous(rawInput
) {

  var input = lookupInput(rawInput);
  var json = {"type":"RNNTimeStep","options":{"inputSize":1,"inputRange":0,"hiddenLayers":[20],"outputSize":1,"decayRate":0.999,"smoothEps":1e-8,"regc":0.000001,"clipval":5,"maxPredictionLength":100,"dataFormatter":{"indexTable":{},"characterTable":{},"characters":[],"specialIndexes":[]}},"hiddenLayers":[{"weight":{"rows":20,"columns":1,"weights":[-5.579754829406738,-0.01953991688787937,-0.13714654743671417,-0.007737110368907452,-5.241464614868164,-0.015473328530788422,-0.008060659281909466,-0.17472247779369354,1.0343186855316162,-3.4411637783050537,-0.01143723726272583,5.080491542816162,0.6466428637504578,-0.001947341370396316,-0.06287137418985367,0.7550598382949829,0.028347887098789215,-0.32567116618156433,-2.577895402908325,-0.012639341875910759]},"transition":{"rows":20,"columns":20,"weights":[0.7248273491859436,-0.0015942285535857081,-0.0027555162087082863,-0.007196277845650911,0.0626932755112648,0.0007514663157053292,-0.007371560670435429,-0.0007740114233456552,-0.7372699975967407,0.20465286076068878,-0.0010671966010704637,0.26401159167289734,-0.6801026463508606,0.002314649522304535,-0.2813710868358612,2.1954197883605957,-20.258663177490234,-0.20632925629615784,2.942561626434326,-0.002047978574410081,0.0006807364406995475,0.0018358356319367886,0.0009899514261633158,-0.001348114456050098,-0.00171177857555449,-0.0005404077237471938,-0.0005307224346324801,-0.006683427840471268,-0.00026872981106862426,-0.0004033031582366675,0.0015765255084261298,-0.014365174807608128,-0.0015302388928830624,0.0021551568061113358,-0.0017678971635177732,-0.014046324416995049,-0.01363819558173418,-0.0012875879183411598,0.001440274529159069,0.001751735806465149,0.0007722193258814514,-0.00038003557710908353,-0.007291777059435844,0.009421445429325104,-0.12504887580871582,0.002105938270688057,0.007804844528436661,-0.024787431582808495,-0.006832771468907595,-0.002273056423291564,0.008735408075153828,-0.026980487629771233,-0.014149896800518036,0.0006830096826888621,-0.0031126670073717833,-0.15191972255706787,-0.005331615451723337,-0.14004239439964294,0.0023789803963154554,-0.010671033523976803,0.0013618716038763523,-0.0005638826405629516,-0.00551016628742218,-0.010466084815561771,-0.009878884069621563,-0.0008115586824715137,-0.007303708232939243,-0.0042602745816111565,-0.009590871632099152,-0.008879669941961765,-0.00018902489682659507,-0.0021567330695688725,-0.003606493351981044,-0.0015567665686830878,0.0011284707579761744,-0.005748754367232323,-0.00007774258847348392,-0.00313367648050189,0.0000076134951996209566,-0.0016267651226371527,0.9176620244979858,-0.0010685960296541452,-0.030074410140514374,-0.008311918005347252,-0.0052460902370512486,0.002296311780810356,-0.010362197645008564,0.7658190131187439,-0.6678484678268433,0.595194935798645,0.0008861831738613546,1.7181888818740845,1.6954176425933838,0.0012965037021785975,-0.2802450358867645,-2.0744268894195557,-77.0768051147461,3.1362500190734863,-5.098758697509766,-0.00021272062440402806,0.0020617947448045015,-0.0018455740064382553,-0.010873794555664062,-0.008540084585547447,-0.008970662951469421,-0.012150472030043602,-0.006794780492782593,-0.008327720686793327,-0.005615739151835442,-0.011358056217432022,-0.0007076692418195307,-0.010060482658445835,-0.0054049063473939896,-0.0022707327734678984,-0.002274180296808481,-0.003592129796743393,-0.00818165484815836,-0.015853747725486755,0.00022829999215900898,-0.000059919046179857105,0.002255265833809972,-0.0011885437415912747,-0.009673446416854858,-0.009821683168411255,-0.009147686883807182,-0.00008337225153809413,-0.011581719852983952,-0.007598578929901123,-0.009319888427853584,-0.008966125547885895,0.0007082894444465637,-0.00825186725705862,-0.00735992006957531,0.0017197297420352697,0.0007937715272419155,-0.008957789279520512,-0.008352972567081451,-0.015402543358504772,-0.001801051083020866,0.0012219386408105493,-0.00222491635940969,0.01101574208587408,-0.0007969711441546679,0.011097032576799393,-0.2394067645072937,0.0022135009057819843,0.010721881873905659,0.17798902094364166,-0.3828776180744171,0.04596677049994469,-0.011368371546268463,-0.3307023048400879,0.11893241107463837,-0.0020907835569232702,-0.016620608046650887,-1.4519234895706177,19.381820678710938,-2.2163326740264893,-0.0022615762427449226,-0.0006777278031222522,-0.10754157602787018,0.0027298955246806145,-0.00279361754655838,0.008889988996088505,-0.05554211139678955,-0.0004739671712741256,0.009704990312457085,-0.9755582809448242,-0.026718465611338615,-0.16000819206237793,0.009130746126174927,-0.024889688938856125,-2.4991021156311035,-0.00045395136112347245,-0.028256995603442192,-28.043577194213867,-2.4089059829711914,-0.24964381754398346,-0.5711547136306763,0.0016618528170511127,-0.0004520031507126987,0.0016951614525169134,0.011872539296746254,0.010425240732729435,-17.90373420715332,-0.0006936585414223373,0.007685000542551279,0.42225876450538635,-12.038236618041992,0.5673112869262695,0.007749340962618589,-1.8250001668930054,-0.00682503916323185,-0.0009325239807367325,-0.02477942407131195,-29.48787498474121,-69.1180648803711,-17.130748748779297,0.0020937416702508926,-0.0016101958462968469,-0.0014813143061473966,-0.0014768966939300299,-0.0009474105900153518,-0.001454627956263721,-0.00019265845185145736,-0.0014276712900027633,0.0014753850409761071,-0.002016151789575815,-0.0017114747315645218,-0.015268087387084961,-0.007859492674469948,-0.018560096621513367,-0.013726778328418732,0.0008574722451157868,-0.010509041137993336,-0.00995877105742693,0.0009149478282779455,-0.010289479047060013,-0.0015685574617236853,0.001197824371047318,-0.0013052200665697455,-0.0023032943718135357,-0.02586890198290348,0.009241951629519463,-0.16609837114810944,0.00606310460716486,0.009852303192019463,-2.7489049434661865,-0.22043509781360626,-0.011526532471179962,-0.011884733103215694,-0.09915892779827118,-0.021425455808639526,-0.0008788714185357094,-0.008701542392373085,-54.7550048828125,-6.872945308685303,-0.8465880155563354,-0.00029757892480120063,-0.019506724551320076,0.05084054544568062,0.003829022403806448,0.009383521974086761,0.010105046443641186,0.2367616444826126,-0.00040975070442073047,0.010050279088318348,-0.14837713539600372,-0.2464221715927124,-0.0566011480987072,0.008959388360381126,-0.1405826210975647,2.245387554168701,0.0012002470903098583,-0.2655829191207886,-1.3254263401031494,-11.252890586853027,0.4587908685207367,-0.796265184879303,-0.01936427503824234,0.001736872480250895,0.001041918876580894,-0.006885105278342962,0.0008067660382948816,-0.1408049464225769,0.0018640353810042143,0.002028345363214612,-0.003910542465746403,-0.005280390847474337,-0.005717389285564423,-0.0015004799934104085,-0.006802189629524946,-0.0017006638227030635,-0.00016977556515485048,0.0009477033745497465,-0.14419321715831757,-0.008620712906122208,-0.13807794451713562,-0.00016905541997402906,-0.0021692949812859297,-0.00037752403295598924,-0.0012821307172998786,-0.01850399374961853,0.0018341506365686655,-0.005031981505453587,0.0006720458040945232,-0.002357472199946642,-0.0006711541791446507,-0.07672545313835144,-0.015648558735847473,-0.000060149748605908826,-0.0010506287217140198,-0.08298318088054657,0.0012526597129181027,-0.00567313889041543,-0.026307620108127594,-0.28090614080429077,-0.017073670402169228,-0.0023522228002548218,0.005221863742917776,-0.19248931109905243,-0.006433326750993729,0.0075081717222929,0.008143361657857895,-0.03957191854715347,0.001290785032324493,0.006971792317926884,0.22435355186462402,0.9177970886230469,0.08047601580619812,0.005892063025385141,0.1927417516708374,-1.8217593431472778,-0.0013122055679559708,-0.31062301993370056,0.9559754133224487,-29.42276382446289,0.021439436823129654,-1.0357706546783447,0.00019309449999127537,0.0004554726183414459,-0.001827701460570097,-0.0008653040858916938,0.0062708123587071896,0.027453238144516945,-0.0013447838136926293,0.0059845601208508015,-0.056715380400419235,0.007005562540143728,0.0007394299027509987,-0.0020965118892490864,-0.020322898402810097,-0.012019435875117779,0.00014542712597176433,0.0015083678299561143,-2.974436044692993,-2.2559561729431152,-0.041009001433849335,0.0014450788730755448,0.0023452192544937134,0.021898461505770683,0.0013752219965681434,-0.02456994540989399,0.007664978504180908,-0.02830173447728157,-0.0006953554693609476,0.011444072239100933,1.0611757040023804,0.15592044591903687,-0.3062671422958374,0.010900829918682575,-0.4153470993041992,0.9590890407562256,-0.001000455697067082,0.28171855211257935,2.8655800819396973,-0.0015669063432142138,-10.455711364746094,-0.017468739300966263,-0.007464736700057983,0.3183315694332123,-0.00087913335300982,-0.008874038234353065,-0.001376720261760056,0.29214316606521606,-0.0016909216064959764,0.00028129754355177283,-0.011187697760760784,-0.17853356897830963,-0.03734797239303589,0.0014568764017894864,-0.17922943830490112,-1.0203372240066528,0.0003778277023229748,-0.28341683745384216,-1.0361069440841675,-0.16647687554359436,0.9049862027168274,0.6538268327713013,-0.0011161260772496462,-0.0006671466398984194,0.0017385645769536495,0.010204097256064415,-0.009629316627979279,-0.0063939751125872135,-0.002264113398268819,-0.006510748062282801,-0.013905273750424385,-0.01183622982352972,-0.007412947714328766,0.00044306088238954544,-0.0028154023457318544,-0.0028936557937413454,0.0020441333763301373,0.002698486438021064,-0.015161337330937386,-0.001525953528471291,0.00008168729254975915,-0.000731389329303056,-0.01996748149394989]},"bias":{"rows":20,"columns":1,"weights":[0.33667418360710144,-0.009456254541873932,-0.01374032348394394,-0.009436341002583504,44.86565017700195,0,-0.009455470368266106,-0.23968419432640076,-0.18301963806152344,26.794437408447266,0,11.032472610473633,-0.9813014268875122,0,-0.02583685889840126,1.893982172012329,0.03221627324819565,-3.518838405609131,0.033476825803518295,0]}}],"outputConnector":{"rows":1,"columns":20,"weights":[7.408797264099121,0.009218025952577591,-0.02137267030775547,0.008973883464932442,-2.3555796146392822,-0.003352201310917735,0.00481626158580184,-4.931492805480957,-34.64448928833008,1.447580099105835,-0.00026667918427847326,0.8103267550468445,7.788106441497803,0.09490909427404404,-0.27142056822776794,11.803727149963379,372.23114013671875,-10.158105850219727,-5.909024238586426,-0.0018735937774181366]},"output":{"rows":1,"columns":1,"weights":[27.207439422607422]},"inputLookup":{"h":0,"d":1,"a":2},"inputLookupLength":3,"outputLookup":{"fthg":0,"ftag":1},"outputLookupLength":2};
  var output = [];
  var states = [];
  var prevStates;
  var state;
  var max = input.length + 1;
  for (var _i = 0; _i < max; _i++) {
    prevStates = states;
    states = [];
    states[0] = {
      name: 'forwardFn',
      left: undefined,
      right: undefined,
      product: new Matrix(1, 1)
    };
    states[1] = {
      name: 'multiply',
      left: json.hiddenLayers[0].weight,
      right: states[0].product,
      product: new Matrix(20, 1)
    };
    states[2] = {
      name: 'multiply',
      left: json.hiddenLayers[0].transition,
      right: typeof prevStates[5] === 'object' ? prevStates[5].product : new Matrix(20, 1),
      product: new Matrix(20, 1)
    };
    states[3] = {
      name: 'add',
      left: states[1].product,
      right: states[2].product,
      product: new Matrix(20, 1)
    };
    states[4] = {
      name: 'add',
      left: states[3].product,
      right: json.hiddenLayers[0].bias,
      product: new Matrix(20, 1)
    };
    states[5] = {
      name: 'relu',
      left: states[4].product,
      right: undefined,
      product: new Matrix(20, 1)
    };
    states[6] = {
      name: 'multiply',
      left: json.outputConnector,
      right: states[5].product,
      product: new Matrix(1, 1)
    };
    states[7] = {
      name: 'add',
      left: states[6].product,
      right: json.output,
      product: new Matrix(1, 1)
    };
    for (var stateIndex = 0, stateMax = 8; stateIndex < stateMax; stateIndex++) {
      state = states[stateIndex];
      var product = state.product;
      var left = state.left;
      var right = state.right;

      switch (state.name) {
case 'forwardFn':
product.weights = _i < input.length ? input[_i]: prevStates[prevStates.length - 1].product.weights;
break;
        case 'multiply': //compiled from src/recurrent/matrix/multiply.js
          
            const leftRows = left.rows;
            const leftColumns = left.columns;
            const rightColumns = right.columns;
            // loop over rows of left
            for (let leftRow = 0; leftRow < leftRows; leftRow++) {
                const leftRowBase = leftColumns * leftRow;
                const rightRowBase = rightColumns * leftRow;
                // loop over cols of right
                for (let rightColumn = 0; rightColumn < rightColumns; rightColumn++) {
                    // dot product loop
                    let dot = 0;
                    // loop over columns of left
                    for (let leftColumn = 0; leftColumn < leftColumns; leftColumn++) {
                        const rightColumnBase = rightColumns * leftColumn;
                        const leftIndex = leftRowBase + leftColumn;
                        const rightIndex = rightColumnBase + rightColumn;
                        dot += left.weights[leftIndex] * right.weights[rightIndex];
                        
                        
                    }
                    product.weights[rightRowBase + rightColumn] = dot;
                }
            }
        
          break;
        case 'add': //compiled from src/recurrent/matrix/add.js
          
            for (let i = 0; i < left.weights.length; i++) {
                product.weights[i] = left.weights[i] + right.weights[i];
                
            }
        
          break;
        case 'relu': //compiled from src/recurrent/matrix/relu.js
          
            for (let i = 0; i < left.weights.length; i++) {
                product.weights[i] = Math.max(0, left.weights[i]); // relu
                
            }
        
          break;
      }
    }
    if (_i >= input.length - 1) { output.push(state.product.weights); }
  }
  return lookupOutput(output);
  function lookupInput(input) {
          var table = {"h":0,"d":1,"a":2};
          var result = [];
          for (var p in table) {
            result.push(Float32Array.from([input[p]]));
          }
          return result;
        }
  function lookupOutput(output) {
          var table = {"fthg":0,"ftag":1};
          var result = {};
          for (var p in table) {
            result[p] = output[table[p]][0];
          }
          return result;
        }

  function Matrix(rows, columns) {
    this.rows = rows;
    this.columns = columns;
    this.weights = zeros(rows * columns);
  }
  function zeros$1(size) {
    return new Float32Array(size);
}
  function softmax(matrix) {
    // probability volume
    const result = new Matrix(matrix.rows, matrix.columns);
    let maxVal = -999999;
    for (let i = 0; i < matrix.weights.length; i++) {
        if (matrix.weights[i] > maxVal) {
            maxVal = matrix.weights[i];
        }
    }
    let s = 0;
    for (let i = 0; i < matrix.weights.length; i++) {
        result.weights[i] = Math.exp(matrix.weights[i] - maxVal);
        s += result.weights[i];
    }
    for (let i = 0; i < matrix.weights.length; i++) {
        result.weights[i] /= s;
    }
    // no backward pass here needed
    // since we will use the computed probabilities outside
    // to set gradients directly on m
    return result;
}
  function randomFloat(min, max) {
    return Math.random() * (max - min) + min;
}
  function sampleI(matrix) {
    // sample argmax from w, assuming w are
    // probabilities that sum to one
    const r = randomFloat(0, 1);
    const w = matrix.weights;
    let x = 0;
    let i = 0;
    while (true) {
        x += w[i];
        if (x > r) {
            return i;
        }
        i++;
    }
}
  function maxI(matrix) {
    // argmax of array w
    const { weights } = matrix;
    let maxv = weights[0];
    let maxix = 0;
    for (let i = 1; i < weights.length; i++) {
        const v = weights[i];
        if (v < maxv)
            continue;
        maxix = i;
        maxv = v;
    }
    return maxix;
}
};