module.exports = function anonymous(rawInput
) {

  var input = lookupInput(rawInput);
  var json = {"type":"RNNTimeStep","options":{"inputSize":1,"inputRange":0,"hiddenLayers":[20],"outputSize":1,"decayRate":0.999,"smoothEps":1e-8,"regc":0.000001,"clipval":5,"maxPredictionLength":100,"dataFormatter":{"indexTable":{},"characterTable":{},"characters":[],"specialIndexes":[]}},"hiddenLayers":[{"weight":{"rows":20,"columns":1,"weights":[-0.01162243913859129,-0.1684926450252533,0.15297308564186096,-0.01041577011346817,-0.0015670321881771088,-0.011889422312378883,-0.02554776892066002,-0.0672943964600563,-0.08556679636240005,2.5971763134002686,0.012412789277732372,-7.056604385375977,0.28430798649787903,-0.028039293363690376,-0.006977117620408535,-0.009520523250102997,8.91720962524414,-0.019233442842960358,-0.9808913469314575,-0.011700594797730446]},"transition":{"rows":20,"columns":20,"weights":[-0.04085533320903778,0.0016264287987723947,0.0044368780218064785,0.0011823143577203155,0.0012078811414539814,0.0006105942884460092,0.010681790299713612,0.005060679279267788,-0.026721568778157234,-0.006800964940339327,-0.008758223615586758,-0.00981779582798481,-0.011167430318892002,-0.005027260631322861,0.00017125812883023173,0.00011837712372653186,-0.009408164769411087,-0.001669642748311162,-0.007888339459896088,-0.0007480729254893959,0.0015736684435978532,-0.010193068534135818,-0.0062325093895196915,-0.002026996575295925,-0.009428789839148521,0.000905544264242053,0.0001663589500822127,-0.008795205503702164,0.0007030822453089058,-0.0461546815931797,-0.005959473084658384,-0.008256069384515285,-0.05027349665760994,-0.003729716408997774,-0.00535306753590703,0.001619151677004993,-0.007406828925013542,-0.006122774910181761,-0.0037948242388665676,0.00007614791684318334,-0.03167789801955223,0.005069563165307045,0.11785656213760376,0.00045441376278176904,0.10584183782339096,-0.008121117949485779,-0.0011740477057173848,-0.004159206990152597,-0.015344412997364998,-0.7058260440826416,0.012435093522071838,-0.0018063175957649946,-0.07883481681346893,0.0032178035471588373,0.007374739274382591,-0.0011590798385441303,-0.7909837365150452,-0.005498857703059912,-0.9562715291976929,-0.00007911079592304304,0.0009806856978684664,-0.0008894413476809859,-0.009496317245066166,-0.00126627366989851,-0.0013153152540326118,0.0022366493940353394,0.0010886734817177057,-0.00032347955857403576,-0.0019078466575592756,-0.009689634665846825,-0.0005648535443469882,-0.0015202919021248817,-0.0012055672705173492,-0.002372482791543007,-0.0007187511655502021,0.0020237548742443323,-0.0016481656348332763,0.0008641934837214649,-0.0006948254886083305,0.002150261541828513,-0.05821417272090912,0.003254982875660062,0.0045032985508441925,0.0007798410370014608,-0.06358767300844193,-0.0019782930612564087,0.0021023487206548452,0.01103705819696188,-0.013584386557340622,-0.03142853453755379,-0.02382105030119419,-0.023043209686875343,-0.017256200313568115,0.0035940157249569893,0.00508523965254426,0.0003987214295193553,-0.005453405436128378,0.0037635043263435364,-0.002678823424503207,-0.002230052836239338,-0.0015503860777243972,0.003303805598989129,-0.008316243067383766,-0.0009424088057130575,-0.00973757915198803,-0.008903346955776215,0.00002778374619083479,-0.011697668582201004,-0.008257787674665451,-0.016690991818904877,-0.009946840815246105,-0.019258812069892883,-0.01568928360939026,0.0021237453911453485,0.0020531187765300274,-0.0005096676177345216,-0.012249119579792023,0.004481019452214241,-0.013680119067430496,-0.0023431051522493362,-0.012055573984980583,-0.00044879052438773215,-0.010546654462814331,0.000936429132707417,-0.011492597870528698,-0.0016789971850812435,0.00955949816852808,-0.03683456405997276,-0.00495565589517355,-0.02206522971391678,-0.03612574189901352,-0.013523156754672527,-0.001618157490156591,-0.006531668361276388,0.0011814252939075232,-0.0011803698725998402,-0.00825803354382515,-0.031031593680381775,-0.00939866155385971,0.0017554346704855561,-0.013561034575104713,0.011420026421546936,-0.1145915761590004,-0.0016894722357392311,0.010360818356275558,-0.0045303176157176495,0.006863044109195471,-0.0641283392906189,-0.008375396952033043,-0.1733446717262268,-0.009231197647750378,-0.008426297456026077,-0.11231768876314163,0.009901114739477634,0.008314672857522964,0.0030018140096217394,-0.02980688586831093,0.0026200581341981888,-0.05864088237285614,-0.002253109822049737,0.007073367014527321,0.0025417618453502655,-0.032007742673158646,-0.0010784562909975648,-0.04335535690188408,-0.007419010624289513,0.009481565095484257,0.0006396824610419571,-0.0037042489275336266,-0.019670525565743446,-0.006284305825829506,-0.030609875917434692,-0.013459042645990849,-0.008630821481347084,0.007982878014445305,0.011660687625408173,-0.018573973327875137,0.00018151830590795726,0.0003360614937264472,0.001492346404120326,-0.005979044362902641,0.014152932912111282,-1.4929041862487793,0.00038568489253520966,-0.16992753744125366,-0.0018410964403301477,-0.0007791127427481115,0.017530445009469986,-0.015077944844961166,-3.6076300144195557,-98.23091125488281,0.3004164397716522,2.3900389671325684,0.004924082197248936,0.008207174949347973,0.0006494551198557019,2.005455493927002,0.011562085710465908,-0.10481300950050354,-0.0010159248486161232,-0.01040408480912447,0.006318471394479275,-1.5800132751464844,0.0015431111678481102,0.08328739553689957,-0.005611928179860115,0.008868785575032234,0.047476619482040405,-0.013142958283424377,-3.428741216659546,0.0539252832531929,-0.04505246877670288,-0.056493546813726425,0.007331063970923424,0.007237790152430534,-0.0011084594298154116,-0.7851386070251465,0.0052683125250041485,-0.2950514554977417,0.0007050097337923944,-0.010039400309324265,-0.001593021210283041,-0.46806198358535767,0.0017445256235077977,-0.00003084287163801491,0.005116384010761976,-0.010027173906564713,-0.01068028062582016,-0.05564894527196884,-24.616348266601562,-4.712478160858154,9.411957740783691,0.18352168798446655,0.00715871574357152,0.01048812735825777,-0.0011482664849609137,0.8466899991035461,-0.010505772195756435,5.954108715057373,-0.0012480823788791895,-0.0008982440922409296,-0.013386057689785957,0.8933805823326111,-0.0006696148193441331,-0.11132600903511047,0.00047241064021363854,0.0016653797356411815,0.008876841515302658,0.0017418531933799386,-11.647566795349121,-0.6775438785552979,0.48144644498825073,-0.4361143410205841,-0.0012641402427107096,0.000749862112570554,-0.0010809066006913781,-0.41595104336738586,0.00093036238104105,0.06487231701612473,-0.001404213602654636,-0.00011958772665821016,-0.007781905587762594,-0.01460978388786316,-0.00026958424132317305,-0.014857368543744087,-0.002271275967359543,0.010214099660515785,-0.020276585593819618,-0.005857315380126238,-0.025321587920188904,-0.02211684174835682,-0.0017830003052949905,-0.0052689374424517155,-0.011518565006554127,-0.007080118637531996,-0.0004623084096238017,-0.01578022912144661,-0.02486254833638668,-0.011762265115976334,-0.00110427918843925,-0.0018026534235104918,-0.004785000346601009,-0.00782817043364048,0.0013948711566627026,-0.009190771728754044,0.0020355579908937216,0.0019058401230722666,-0.005946046207100153,0.009371601045131683,-0.001251694862730801,-0.00876370258629322,-0.007852760143578053,-0.003447414143010974,-0.0020526451990008354,-0.024945106357336044,-0.0018372295890003443,-0.005932927131652832,-0.010168911889195442,-0.004785237833857536,-0.0008294114959426224,-0.0004889193223789334,-0.006459645926952362,-0.018687905743718147,0.00029638787964358926,-0.015429615043103695,-0.0019936240278184414,0.001617471338249743,-0.014951517805457115,-0.013647591695189476,-0.012060878798365593,-0.015872959047555923,-0.009011861868202686,-0.0004999025259166956,-0.0024429995100945234,-0.009353095665574074,-0.010910138487815857,-0.012455062940716743,-0.011902122758328915,-0.00802078377455473,-0.0017687503714114428,-0.03012528270483017,0.005154036451131105,-0.8629537224769592,0.0010053709847852588,0.015359913930296898,-0.0019484978402033448,-0.0008745130035094917,0.08469925820827484,-0.010889510624110699,0.9721710681915283,1.3632515668869019,0.3884599506855011,0.15704689919948578,0.0008056061342358589,0.006616002880036831,-0.0013355447445064783,-24.18088722229004,0.0035450919531285763,-1.2088744640350342,0.0006478668074123561,0.012888177298009396,0.0068960716016590595,-0.014156839810311794,-0.00013656313240062445,-0.005678634624928236,-0.0014338487526401877,-0.007828799076378345,0.005108828656375408,-0.0014475019415840507,-0.014114972203969955,-0.019073233008384705,-0.014307965524494648,-0.007904726080596447,0.0075124530121684074,0.00931989960372448,0.0005334989400580525,-0.005905667785555124,0.0018516003619879484,-0.008061748929321766,-0.0004089374269824475,-0.04776779189705849,0.11798958480358124,1.593131184577942,-0.00771972443908453,-0.01906171441078186,-0.0011014300398528576,0.00045254069846123457,-0.0019722834695130587,-0.06113072484731674,0.22910067439079285,-0.9475291967391968,0.08663197606801987,1.2203259468078613,0.008243491873145103,0.004414275288581848,0.0001350127422483638,-1.2493352890014648,0.005798229947686195,-0.727191686630249,0.0007897388422861695,-0.00764029286801815,0.0011896505020558834,-0.008864277973771095,-0.0017270846292376518,-0.011239326559007168,0.00037799758138135076,0.0005012158653698862,-0.011003278195858002,-0.00825424212962389,-0.009677760303020477,-0.011073272675275803,-0.00899322610348463,-0.0003495013515930623,-0.00210227956995368,0.001990429824218154,-0.0014836996560916305,-0.011705683544278145,-0.008440013974905014,-0.008412327617406845,0.0017711678519845009]},"bias":{"rows":20,"columns":1,"weights":[-0.06904156506061554,-0.009443774819374084,-0.6648046374320984,0,-0.01497100479900837,0,0,-0.0023254845291376114,-0.010418495163321495,-5.73687219619751,-0.0295074712485075,-1.683354377746582,-1.0986970663070679,-0.009442375041544437,-0.02160727046430111,0,-20.84623908996582,-0.010200905613601208,-10.022629737854004,0]}}],"outputConnector":{"rows":1,"columns":20,"weights":[0.0009893951937556267,0.022049596533179283,-1.2543543577194214,0.008172230795025826,0.34386730194091797,-0.0105353482067585,-0.007772627752274275,-0.0005885190330445766,-0.009922300465404987,-0.23381569981575012,317.97900390625,-0.3555491864681244,0.38024696707725525,0.010299904271960258,0.0032236187253147364,0.012701387517154217,-0.40333449840545654,0.006385269574820995,-0.01829773746430874,-0.008156145922839642]},"output":{"rows":1,"columns":1,"weights":[3.287747383117676]},"inputLookup":{"h":0,"d":1,"a":2},"inputLookupLength":3,"outputLookup":{"fthg":0,"ftag":1},"outputLookupLength":2};
  var output = [];
  var states = [];
  var prevStates;
  var state;
  var max = input.length + 1;
  for (var _i = 0; _i < max; _i++) {
    prevStates = states;
    states = [];
    states[0] = {
      name: 'forwardFn',
      left: undefined,
      right: undefined,
      product: new Matrix(1, 1)
    };
    states[1] = {
      name: 'multiply',
      left: json.hiddenLayers[0].weight,
      right: states[0].product,
      product: new Matrix(20, 1)
    };
    states[2] = {
      name: 'multiply',
      left: json.hiddenLayers[0].transition,
      right: typeof prevStates[5] === 'object' ? prevStates[5].product : new Matrix(20, 1),
      product: new Matrix(20, 1)
    };
    states[3] = {
      name: 'add',
      left: states[1].product,
      right: states[2].product,
      product: new Matrix(20, 1)
    };
    states[4] = {
      name: 'add',
      left: states[3].product,
      right: json.hiddenLayers[0].bias,
      product: new Matrix(20, 1)
    };
    states[5] = {
      name: 'relu',
      left: states[4].product,
      right: undefined,
      product: new Matrix(20, 1)
    };
    states[6] = {
      name: 'multiply',
      left: json.outputConnector,
      right: states[5].product,
      product: new Matrix(1, 1)
    };
    states[7] = {
      name: 'add',
      left: states[6].product,
      right: json.output,
      product: new Matrix(1, 1)
    };
    for (var stateIndex = 0, stateMax = 8; stateIndex < stateMax; stateIndex++) {
      state = states[stateIndex];
      var product = state.product;
      var left = state.left;
      var right = state.right;

      switch (state.name) {
case 'forwardFn':
product.weights = _i < input.length ? input[_i]: prevStates[prevStates.length - 1].product.weights;
break;
        case 'multiply': //compiled from src/recurrent/matrix/multiply.js
          
            const leftRows = left.rows;
            const leftColumns = left.columns;
            const rightColumns = right.columns;
            // loop over rows of left
            for (let leftRow = 0; leftRow < leftRows; leftRow++) {
                const leftRowBase = leftColumns * leftRow;
                const rightRowBase = rightColumns * leftRow;
                // loop over cols of right
                for (let rightColumn = 0; rightColumn < rightColumns; rightColumn++) {
                    // dot product loop
                    let dot = 0;
                    // loop over columns of left
                    for (let leftColumn = 0; leftColumn < leftColumns; leftColumn++) {
                        const rightColumnBase = rightColumns * leftColumn;
                        const leftIndex = leftRowBase + leftColumn;
                        const rightIndex = rightColumnBase + rightColumn;
                        dot += left.weights[leftIndex] * right.weights[rightIndex];
                        
                        
                    }
                    product.weights[rightRowBase + rightColumn] = dot;
                }
            }
        
          break;
        case 'add': //compiled from src/recurrent/matrix/add.js
          
            for (let i = 0; i < left.weights.length; i++) {
                product.weights[i] = left.weights[i] + right.weights[i];
                
            }
        
          break;
        case 'relu': //compiled from src/recurrent/matrix/relu.js
          
            for (let i = 0; i < left.weights.length; i++) {
                product.weights[i] = Math.max(0, left.weights[i]); // relu
                
            }
        
          break;
      }
    }
    if (_i >= input.length - 1) { output.push(state.product.weights); }
  }
  return lookupOutput(output);
  function lookupInput(input) {
          var table = {"h":0,"d":1,"a":2};
          var result = [];
          for (var p in table) {
            result.push(Float32Array.from([input[p]]));
          }
          return result;
        }
  function lookupOutput(output) {
          var table = {"fthg":0,"ftag":1};
          var result = {};
          for (var p in table) {
            result[p] = output[table[p]][0];
          }
          return result;
        }

  function Matrix(rows, columns) {
    this.rows = rows;
    this.columns = columns;
    this.weights = zeros(rows * columns);
  }
  function zeros(size) {
    return new Float32Array(size);
}
  function softmax(matrix) {
    // probability volume
    const result = new Matrix(matrix.rows, matrix.columns);
    let maxVal = -999999;
    for (let i = 0; i < matrix.weights.length; i++) {
        if (matrix.weights[i] > maxVal) {
            maxVal = matrix.weights[i];
        }
    }
    let s = 0;
    for (let i = 0; i < matrix.weights.length; i++) {
        result.weights[i] = Math.exp(matrix.weights[i] - maxVal);
        s += result.weights[i];
    }
    for (let i = 0; i < matrix.weights.length; i++) {
        result.weights[i] /= s;
    }
    // no backward pass here needed
    // since we will use the computed probabilities outside
    // to set gradients directly on m
    return result;
}
  function randomFloat(min, max) {
    return Math.random() * (max - min) + min;
}
  function sampleI(matrix) {
    // sample argmax from w, assuming w are
    // probabilities that sum to one
    const r = randomFloat(0, 1);
    const w = matrix.weights;
    let x = 0;
    let i = 0;
    while (true) {
        x += w[i];
        if (x > r) {
            return i;
        }
        i++;
    }
}
  function maxI(matrix) {
    // argmax of array w
    const { weights } = matrix;
    let maxv = weights[0];
    let maxix = 0;
    for (let i = 1; i < weights.length; i++) {
        const v = weights[i];
        if (v < maxv)
            continue;
        maxix = i;
        maxv = v;
    }
    return maxix;
}
};